import os
import base64
import hashlib
import tkinter as tk
from tkinter import filedialog, messagebox
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2

# Constants
SALT_SIZE = 16
KEY_SIZE = 32  # AES-256
IV_SIZE = 16
ITERATIONS = 100000
CHUNK_SIZE = 64 * 1024  # 64KB for file processing


# Function to derive a key from a password
def derive_key(password, salt):
    return PBKDF2(password, salt, dkLen=KEY_SIZE, count=ITERATIONS)


# AES Encryption function
def encrypt_file(file_path, password):
    salt = os.urandom(SALT_SIZE)
    key = derive_key(password.encode(), salt)
    iv = os.urandom(IV_SIZE)
    cipher = AES.new(key, AES.MODE_CBC, iv)

    output_file = file_path + ".enc"

    with open(file_path, "rb") as f, open(output_file, "wb") as out_f:
        out_f.write(salt)  # Save salt at the beginning
        out_f.write(iv)  # Save IV after salt

        while chunk := f.read(CHUNK_SIZE):
            if len(chunk) % AES.block_size != 0:
                padding_length = AES.block_size - (len(chunk) % AES.block_size)
                chunk += bytes([padding_length]) * padding_length
            out_f.write(cipher.encrypt(chunk))

    return output_file


# AES Decryption function
def decrypt_file(file_path, password):
    with open(file_path, "rb") as f:
        salt = f.read(SALT_SIZE)
        iv = f.read(IV_SIZE)
        key = derive_key(password.encode(), salt)
        cipher = AES.new(key, AES.MODE_CBC, iv)

        output_file = file_path.replace(".enc", "_decrypted")

        with open(output_file, "wb") as out_f:
            while chunk := f.read(CHUNK_SIZE):
                decrypted_chunk = cipher.decrypt(chunk)
                if len(chunk) < CHUNK_SIZE:
                    padding_length = decrypted_chunk[-1]
                    decrypted_chunk = decrypted_chunk[:-padding_length]
                out_f.write(decrypted_chunk)

    return output_file


# GUI for File Encryption/Decryption
class EncryptionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("AES-256 File Encryptor")
        self.root.geometry("400x250")

        self.label = tk.Label(root, text="Select a file to encrypt or decrypt:", font=("Arial", 12))
        self.label.pack(pady=10)

        self.select_button = tk.Button(root, text="Select File", command=self.select_file)
        self.select_button.pack(pady=5)

        self.password_label = tk.Label(root, text="Enter Password:", font=("Arial", 10))
        self.password_label.pack(pady=5)

        self.password_entry = tk.Entry(root, show="*", width=30)
        self.password_entry.pack(pady=5)

        self.encrypt_button = tk.Button(root, text="Encrypt", command=self.encrypt_action)
        self.encrypt_button.pack(pady=5)

        self.decrypt_button = tk.Button(root, text="Decrypt", command=self.decrypt_action)
        self.decrypt_button.pack(pady=5)

        self.status_label = tk.Label(root, text="", font=("Arial", 10), fg="green")
        self.status_label.pack(pady=10)

    def select_file(self):
        self.file_path = filedialog.askopenfilename()
        if self.file_path:
            self.status_label.config(text=f"Selected: {os.path.basename(self.file_path)}")

    def encrypt_action(self):
        if hasattr(self, "file_path") and self.password_entry.get():
            encrypted_file = encrypt_file(self.file_path, self.password_entry.get())
            messagebox.showinfo("Success", f"File encrypted:\n{encrypted_file}")
            self.status_label.config(text="Encryption successful")
        else:
            messagebox.showerror("Error", "Please select a file and enter a password")

    def decrypt_action(self):
        if hasattr(self, "file_path") and self.password_entry.get():
            decrypted_file = decrypt_file(self.file_path, self.password_entry.get())
            messagebox.showinfo("Success", f"File decrypted:\n{decrypted_file}")
            self.status_label.config(text="Decryption successful")
        else:
            messagebox.showerror("Error", "Please select a file and enter a password")


# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = EncryptionApp(root)
    root.mainloop()
